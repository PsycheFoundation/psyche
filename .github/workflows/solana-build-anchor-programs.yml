name: Build Solana Anchor Programs and Validator Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, '**']

jobs:
  build-validator-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: nixbuild/nix-quick-install-action@v31
        with:
          nix_conf: |
            download-buffer-size = 524288000
            accept-flake-config = true
            substituters = https://cache.nixos.org/ https://cache.garnix.io/ https://nix-community.cachix.org
            trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      # Check if validator image cache already exists
      - name: Check validator image cache
        id: cache-validator
        uses: actions/cache@v4
        with:
          path: validator-image.tar.gz
          key: validator-image-${{ runner.os }}-${{ hashFiles('architectures/decentralized/solana-coordinator/**/*.rs', 'architectures/decentralized/solana-coordinator/**/*.toml', 'architectures/decentralized/solana-authorizer/**/*.rs', 'architectures/decentralized/solana-authorizer/**/*.toml', 'docker/test/psyche_solana_validator_entrypoint.sh', 'nix/docker.nix', 'flake.lock') }}
          lookup-only: true

      # Only build if cache doesn't exist
      - name: Build Anchor Programs
        if: steps.cache-validator.outputs.cache-hit != 'true'
        run: |
          echo "Building Solana Coordinator"
          nix develop --command bash -c "cd architectures/decentralized/solana-coordinator && anchor build"

          echo "Building Solana Authorizer"
          nix develop --command bash -c "cd architectures/decentralized/solana-authorizer && anchor build"

          echo "=== Built Coordinator artifacts ==="
          ls -la architectures/decentralized/solana-coordinator/target/deploy/

          echo "=== Built Authorizer artifacts ==="
          ls -la architectures/decentralized/solana-authorizer/target/deploy/

      - name: Build Validator Docker Image
        if: steps.cache-validator.outputs.cache-hit != 'true'
        run: |
          export PSYCHE_HOME=$(pwd)
          echo "=== Building validator image ==="
          nix build .#docker-psyche-solana-test-validator --impure --out-link result
          ./result | docker load

          echo "=== Saving validator image to tar.gz ==="
          docker save psyche-solana-test-validator:latest | gzip > validator-image.tar.gz
          ls -lh validator-image.tar.gz

      # Save validator image to cache
      - name: Save Validator Image to cache
        if: steps.cache-validator.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: validator-image.tar.gz
          key: validator-image-${{ runner.os }}-${{ hashFiles('architectures/decentralized/solana-coordinator/**/*.rs', 'architectures/decentralized/solana-coordinator/**/*.toml', 'architectures/decentralized/solana-authorizer/**/*.rs', 'architectures/decentralized/solana-authorizer/**/*.toml', 'docker/test/psyche_solana_validator_entrypoint.sh', 'nix/docker.nix', 'flake.lock') }}

      - name: Cache status
        run: |
          if [ "${{ steps.cache-validator.outputs.cache-hit }}" == "true" ]; then
            echo "Validator image cache already exists, skipped build"
          else
            echo "Built and cached validator image successfully"
          fi
