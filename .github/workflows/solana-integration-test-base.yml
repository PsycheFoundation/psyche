name: Solana integration test base

on:
  workflow_call:
    inputs:
      test-name:
        description: 'Name of the test to run (e.g., test_one_clients_three_epochs_run)'
        required: true
        type: string

jobs:
  solana-integration-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main

      - name: Check initial disk space
        run: |
          echo "Initial disk usage"
          df -h
          echo "Docker info"
          docker info | grep -i "docker root dir" || true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: nixbuild/nix-quick-install-action@v31
        with:
          nix_conf: |
            download-buffer-size = 524288000
            accept-flake-config = true
            substituters = https://cache.nixos.org/ https://cache.garnix.io/ https://nix-community.cachix.org
            trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=

      - name: Install just
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          sudo chmod +x /usr/local/bin/just

      - name: Additional cleanup before client download
        run: |
          echo "Additional cleanup to maximize available space"

          # Clean any remaining Docker artifacts
          docker system df
          docker builder prune -af || true

          # Clean system package cache
          sudo apt-get clean || true
          sudo apt-get autoclean || true

          # Remove unnecessary system files
          sudo rm -rf /var/cache/apt/archives/* 2>/dev/null || true
          sudo rm -rf /usr/share/dotnet 2>/dev/null || true
          sudo rm -rf /usr/local/lib/android 2>/dev/null || true

          echo "Disk space before client download"
          df -h

      # Step 2: Download Solana Test Client Image
      - name: Download Solana Test Client Image
        run: |
          echo "Disk space before client build"
          df -h

          # Calculate the derivation hash
          echo "Calculating derivation path"
          DRV_PATH=$(nix eval --raw .#docker-psyche-solana-test-client.drvPath)

          echo "Derivation path: $DRV_PATH"

          OUT_PATH=$(nix derivation show $DRV_PATH | jq -r '.[].outputs.out.path')
          echo "Output path: $OUT_PATH"

          # download from Garnix cache first
          echo "Attempting to fetch from Garnix cache"
          nix-store --realise $OUT_PATH --option substitute true --option max-jobs 0

          # Load the image into Docker
          $OUT_PATH | docker load

          echo "Disk space after client build"
          df -h

      # Aggressive cleanup after client build to free space for validator
      - name: Aggressive cleanup after client build
        run: |
          echo "Starting aggressive cleanup after client build"

          # Clean up the path file
          rm -f client-image-path.txt

          # Clean nix store garbage (this removes all the build dependencies)
          nix-collect-garbage -d
          nix store optimise

          # Clean Docker build cache (but keep the client image we just loaded)
          docker builder prune -af || true

          # Remove temp files
          sudo rm -rf /tmp/* 2>/dev/null || true
          sudo rm -rf /var/tmp/* 2>/dev/null || true

          # Clean apt cache
          sudo apt-get clean || true

          # Remove old logs
          sudo journalctl --vacuum-time=1s 2>/dev/null || true

          echo "Disk space after aggressive cleanup"
          df -h

      # Step 1: Get Validator Image from cache
      - name: Get Validator Image from cache
        id: cache-validator
        uses: actions/cache/restore@v4
        with:
          path: validator-image.tar.gz
          key: validator-image-${{ runner.os }}-${{ hashFiles('architectures/decentralized/solana-coordinator/**/*.rs', 'architectures/decentralized/solana-coordinator/**/*.toml', 'architectures/decentralized/solana-coordinator/Cargo.lock', 'architectures/decentralized/solana-authorizer/**/*.rs', 'architectures/decentralized/solana-authorizer/**/*.toml', 'architectures/decentralized/solana-authorizer/Cargo.lock', 'docker/test/psyche_solana_validator_entrypoint.sh', 'nix/docker.nix', 'flake.lock') }}
          fail-on-cache-miss: true

      - name: Load Validator Image
        run: |
          echo "Loading validator image from cache"
          docker load < validator-image.tar.gz
          docker images | grep psyche-solana-test-validator

          echo "Disk usage after loading validator"
          df -h

      - name: Clean up validator tar file
        run: |
          # Remove the compressed validator image to free up disk space
          rm -f validator-image.tar.gz
          echo "Disk usage after removing validator tar"
          df -h

      - name: Verify Docker images exist
        run: |
          echo "Checking for required Docker images"
          docker images
          docker images | grep psyche-solana-test-validator || (echo "ERROR: psyche-solana-test-validator image not found" && exit 1)
          docker images | grep psyche-solana-test-client || (echo "ERROR: psyche-solana-test-client image not found" && exit 1)
          echo "All required images are present"

          echo "Final disk usage before tests"
          df -h

      # Step 4: Run Integration Tests
      - name: Run integration test
        run: |
          nix develop --command cargo test --release -p psyche-decentralized-testing --test integration_tests -- --nocapture "${{ inputs.test-name }}"
